package day1130;

import java.awt.Button;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class JianTing extends Frame {
	static boolean tag = true;//标签

	public static void main(String[] args) {
		JianTing frame = new JianTing();  //对象
		frame.setSize(400, 400); //布局
		frame.setBackground(Color.BLUE); // 颜色
		Button button = new Button("查看效果");  //按键 的布局
		frame.setLayout(new FlowLayout(FlowLayout.LEFT, 150, 150));//
		frame.add(button);
		frame.setVisible(true);

		frame.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {

				System.exit(0);

			}
		});

		button.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (!tag)
					return;
				// TODO Auto-generated method stub
				System.out.println("11111");
			}
		});

	}

}



package day1130;

import java.awt.Button;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class JianTing2 extends Frame implements Runnable {
	static boolean tag = true;
	static JianTing2 frame = new JianTing2();
	static Button button = new Button("点击倒计时");
	@Override
	public void run() {
		int count = 3;
		while (!tag) {
			button.setLabel(count + "s");
			count--;
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (count == -1) {
				tag = true;
				button.setLabel("结束，点");
			}
		}

	}

	public static void main(String[] args) {

		frame.setSize(400, 400);
		frame.setBackground(Color.BLUE);
         
		frame.setLayout(new FlowLayout(FlowLayout.CENTER, 150, 150));
		frame.add(button);
		frame.setVisible(true);

		frame.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {

				System.exit(0);
			}
		});
		button.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (!tag)
					return;
				tag = false;
				Thread thread = new Thread(frame);
				thread.start();
			}
		});

	}

}


package day1128;

import java.awt.Button;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.WindowAdapter;

public class Demo extends Frame {
 public Demo (String str) {
	 super(str);
  }
 
 public static void main(String[] args) {
	Demo demo  =new Demo("1234");
	demo.setSize(400,400);
	demo.setBackground(Color.yellow);
	Button button =new Button("1233132123");
	button.setSize(10,100);
	button.setSize(100,100);
	// button.setLabel("1111111111111");
	Thread thread =new Thread (new Runnable() {
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			int count =0;
			String str ="";
			while (count<400) {
				
				str+="1";
				count++;
				button.setLabel(str);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
		}
		
	});
	thread.start();
	demo.addWindowListener(new WindowAdapter() {
		public void windowClosing(java.awt.event.WindowEvent e) {
			System.exit(0);
	
		}
	});
 }
}



	package day1114;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

public class FieldDemo {

	public int age;
	public String name;
	public static String gender;
	public static void main(String[] args) {
		
		
		try {
			Class<?> cla =Class.forName("day1114.FieldDemo");
			Field [] fields =cla.getDeclaredFields();
			for(Field f:fields) {
				System.out.println("开始一个属性");
				System.out.println("name="+f.getName());
				System.out.println("decl="+f.getDeclaringClass());
				System.out.println("type="+f.getType());
				int modifier =f.getModifiers();
				System.out.println("modifiers="+Modifier.toString(modifier));
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	
	
	
	
	
}

	package day1128;

public class ThreadDemo extends Thread  {
	public static void main(String[] args) {
		
		for (int i = 0; i <10; i++) {
			
			MyThread thread =new MyThread();
			thread.start();
		}
		
	}
	
}
	
	
	
	
	
	class MyThread extends Thread{
	@Override
	public void run() {
		for (int i = 0; i < 3; i++) {
			System.out.println(Thread.currentThread().getName()+"-正在执行！");
			
		}
	}
		
		
	
	
	
	
	
	
}
	
	


